package com.webapp.systemtest;// Generated by Selenium IDE

import com.webapp.config.MvcConfig;
import com.webapp.model.Building;
import com.webapp.model.Record;
import com.webapp.model.user.User;
import com.webapp.service.database.dao.*;
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.context.web.WebAppConfiguration;

import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertEquals;

@ExtendWith(SpringExtension.class)
@ContextConfiguration(classes = MvcConfig.class)
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@WebAppConfiguration
public class UserST {

    JavascriptExecutor js;
    private WebDriver driver;

    @Autowired
    private RecordDao recordDao;

    @Autowired
    private UserDao userDao;

    @Autowired
    private BuildingDao buildingDao;

    @Autowired
    private NewsDao newsDao;

    @Autowired
    private CommentDao commentDao;

    private User user;
    private Map<String, Building> buildingMap;

    private String username = "usernameusername1";
    private String password = "passwordpassword1";

    static Stream<Arguments> bookProvider() {
        return Stream.of(
                Arguments.of("buildingname1", "2021-01-01", "2"),
                Arguments.of("buildingname2", "2021-01-01", "2")
        );
    }

    @BeforeEach
    public void setUp() {
        driver = new ChromeDriver();
        js = (JavascriptExecutor) driver;
        this.user = new User("usernameusername1", "passwordpassword1", "name1", "MALE", "13000000000");
        this.userDao.addUser(this.user);
        this.user = this.userDao.queryAllUsers().get(0);
        Building building1 = new Building("buildingname1", "buildingdescription1", "400");
        Building building2 = new Building("buildingname2", "buildingdescription2", "4400");
        this.buildingDao.addBuilding(building1);
        this.buildingDao.addBuilding(building2);
        this.buildingMap = new HashMap<>();
        for (Building building : this.buildingDao.listBuilding(20)) {
            this.buildingMap.put(building.getName(), building);
        }
    }

    @AfterEach
    public void tearDown() {
        driver.quit();
        for (User user : this.userDao.queryAllUsers()) {
            this.userDao.deleteUser(user.getId());
        }
        for (Record record : this.recordDao.listRecord(20, true)) {
            this.recordDao.deleteRecord(record.getId());
        }
        for (Record record : this.recordDao.listRecord(20, false)) {
            this.recordDao.deleteRecord(record.getId());
        }
        for (Building building : this.buildingDao.listBuilding(20)) {
            this.buildingDao.deleteBuilding(building.getId());
        }
    }

    private void userLogin() {
        // Step # | name | target | value | comment
        // 1 | open | http://localhost:8080/MeetHere_war/ |  |
        driver.get("http://localhost:8080/MeetHere_war/");
        // 2 | setWindowSize | 1052x554 |  |
        driver.manage().window().setSize(new Dimension(1052, 554));
        // 3 | click | id=username |  |
        driver.findElement(By.id("username")).click();
        // 4 | type | id=username | root |
        driver.findElement(By.id("username")).sendKeys(username);
        // 5 | type | id=password | root |
        driver.findElement(By.id("password")).sendKeys(password);
        // 6 | click | css=.btn:nth-child(1) |  |
        driver.findElement(By.cssSelector(".btn:nth-child(1)")).click();
    }

    @ParameterizedTest
    @MethodSource("bookProvider")
    @Order(1)
    public void bookBuilding(String buildingName, String startDate, String duration) throws Throwable {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Building building = this.buildingMap.get(buildingName);
        userLogin();
        // Test name: BookBuilding
        // Step # | name | target | value | comment
        // 1 | open | http://localhost:8080/MeetHere_war/building?action=list |  |
        driver.get("http://localhost:8080/MeetHere_war/building?action=list");
        // 2 | setWindowSize | 1052x554 |  |
        driver.manage().window().setSize(new Dimension(1052, 554));
        // 3 | click | id=buildingId |  |
        driver.findElement(By.id("buildingId")).click();
        // 4 | select | id=buildingId | label=building1 |
        {
            WebElement dropdown = driver.findElement(By.id("buildingId"));
            dropdown.findElement(By.xpath("//option[. = '" + buildingName + "']")).click();
        }
        // 5 | click | id=buildingId |  |
        driver.findElement(By.id("buildingId")).click();
        // 6 | click | id=startDate |  |
        driver.findElement(By.id("startDate")).click();
        // 7 | type | id=startDate | 2020-01-01 |
        driver.findElement(By.id("startDate")).sendKeys(startDate);
        // 8 | type | id=duration | 1 |
        driver.findElement(By.id("duration")).sendKeys(duration);
        // 9 | click | css=.btn |  |
        driver.findElement(By.cssSelector(".btn")).click();
        Record record = this.recordDao.listRecordWithUserId(20, this.user.getId(), false).get(0);
        assertAll(
                () -> assertEquals(building.getId(), record.getBuildingId()),
                () -> assertEquals(this.user.getId(), record.getUserId()),
                () -> assertEquals(sdf.parse(startDate).getTime(), record.getStartDate()),
                () -> assertEquals(sdf.parse(startDate).getTime() + Integer.parseInt(duration) * 24 * 3600 * 1000, record.getEndDate())
        );
    }

    @Test
    @Order(2)
    public void clickMenu() {
        userLogin();
        // Test name: ClickMenu
        // Step # | name | target | value | comment
        // 1 | open | http://localhost:8080/MeetHere_war/blank |  |
        driver.get("http://localhost:8080/MeetHere_war/blank");
        // 2 | setWindowSize | 1052x554 |  |
        driver.manage().window().setSize(new Dimension(1920, 1080));
        // 3 | click | linkText=首页 |  |
        driver.findElement(By.linkText("首页")).click();
        assertEquals("欢迎您,朋友!", driver.findElement(By.id("welcome")).getText());
        // 4 | click | linkText=新闻 |  |
        driver.findElement(By.linkText("新闻")).click();
        assertEquals("新闻", driver.findElement(By.id("#id_title")).getText());
        // 5 | click | linkText=留言板 |  |
        driver.findElement(By.linkText("留言板")).click();
        assertEquals("留言板", driver.findElement(By.id("#id_title")).getText());
        // 6 | click | linkText=场地预约 |  |
        driver.findElement(By.linkText("场地预约")).click();
        assertEquals("我要预约", driver.findElement(By.id("#id_title")).getText());
        // 7 | click | linkText=预约记录 |  |
        driver.findElement(By.linkText("预约记录")).click();
        assertEquals("已审核记录", driver.findElement(By.id("#id_title")).getText());
        // 8 | click | linkText=修改密码 |  |
        driver.findElement(By.linkText("修改密码")).click();
        assertEquals("修改密码", driver.findElement(By.id("#id_title")).getText());
        // 9 | click | linkText=退出系统 |  |
        driver.findElement(By.linkText("退出系统")).click();
        assertEquals("注册", driver.findElement(By.id("#id_signup")).getText());
    }

    @Disabled
    //TODO
    @Test
    public void showNewsDetail() {
        // Test name: ShowNewsDetail
        // Step # | name | target | value | comment
        // 1 | open | http://localhost:8080/MeetHere_war/news?action=list |  |
        driver.get("http://localhost:8080/MeetHere_war/news?action=list");
        // 2 | setWindowSize | 1052x554 |  |
        driver.manage().window().setSize(new Dimension(1052, 554));
        // 3 | click | css=.btn |  |
        driver.findElement(By.cssSelector(".btn")).click();
    }

    @Disabled
    //TODO
    @Test
    public void addComment() {
        // Test name: AddComment
        // Step # | name | target | value | comment
        // 1 | open | http://localhost:8080/MeetHere_war/comment?action=list |  |
        driver.get("http://localhost:8080/MeetHere_war/comment?action=list");
        // 2 | setWindowSize | 1052x554 |  |
        driver.manage().window().setSize(new Dimension(1052, 554));
        // 3 | click | css=.btn |  |
        driver.findElement(By.cssSelector(".btn")).click();
        // 4 | click | id=content |  |
        driver.findElement(By.id("content")).click();
        // 5 | type | id=content | 123 |
        driver.findElement(By.id("content")).sendKeys("123");
        // 6 | click | css=.btn:nth-child(1) |  |
        driver.findElement(By.cssSelector(".btn:nth-child(1)")).click();
    }

}
