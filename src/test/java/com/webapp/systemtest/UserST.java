package com.webapp.systemtest; // Generated by Selenium IDE

import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.params.provider.Arguments.arguments;

import com.webapp.config.MvcConfig;
import com.webapp.model.Building;
import com.webapp.model.Comment;
import com.webapp.model.News;
import com.webapp.model.Record;
import com.webapp.model.user.User;
import com.webapp.service.database.dao.BuildingDao;
import com.webapp.service.database.dao.CommentDao;
import com.webapp.service.database.dao.NewsDao;
import com.webapp.service.database.dao.RecordDao;
import com.webapp.service.database.dao.UserDao;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Stream;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.context.web.WebAppConfiguration;

@ExtendWith(SpringExtension.class)
@ContextConfiguration(classes = MvcConfig.class)
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@WebAppConfiguration
public class UserST {

  JavascriptExecutor js;
  private WebDriver driver;

  @Autowired
  private RecordDao recordDao;

  @Autowired
  private UserDao userDao;

  @Autowired
  private BuildingDao buildingDao;

  @Autowired
  private NewsDao newsDao;

  @Autowired
  private CommentDao commentDao;

  private User user;
  private Map<String, Building> buildingMap;
  private Set<Integer> addedNewsIdSet;
  private Set<Integer> addedUnverifiedCommentIdSet;
  private Set<Integer> originUnverifiedCommentIdSet;
  private Set<Integer> addedVerifiedCommentIdSet;

  private String username = "usernameusername1";
  private String password = "passwordpassword1";

  static Stream<Arguments> bookProvider() {
    return Stream.of(
        Arguments.of("buildingname1", "2021-01-01", "2"),
        Arguments.of("buildingname2", "2021-01-01", "2"));
  }

  static Stream<Arguments> commentProvider() {
    return Stream.of(arguments("new content", true, ""), arguments("", false, "内容不能为空！"));
  }

  @BeforeEach
  public void setUp() {
    // Protect original data in database
    Set<Integer> originNewsIdSet = new HashSet<>();
    List<News> originalNewsList = this.newsDao.listNews(20);
    for (News news : originalNewsList) {
      originNewsIdSet.add(news.getId());
    }
    List<Comment> originUnverifiedCommentList = this.commentDao.listComment(20, false);
    List<Comment> originVerifiedCommentList = this.commentDao.listComment(20, true);
    this.originUnverifiedCommentIdSet = new HashSet<>();
    Set<Integer> originVerifiedCommentIdSet = new HashSet<>();
    for (Comment comment : originUnverifiedCommentList) {
      originUnverifiedCommentIdSet.add(comment.getId());
    }
    for (Comment comment : originVerifiedCommentList) {
      originVerifiedCommentIdSet.add(comment.getId());
    }
    // Add new data to database
    // Add news
    News news1 = new News("newsTitle1", 10000, 10000, "newsAuthor1", "newsDetail1");
    News news2 = new News("newsTitle2", 20000, 20000, "newsAuthor2", "newsDetail2");
    assertAll(() -> this.newsDao.insertNews(news1), () -> this.newsDao.insertNews(news2));
    this.addedNewsIdSet = new HashSet<>();
    List<News> addedNewsList = this.newsDao.listNews(20);
    for (News news : addedNewsList) {
      this.addedNewsIdSet.add(news.getId());
    }
    this.addedNewsIdSet.removeAll(originNewsIdSet);
    assertEquals(2, this.addedNewsIdSet.size());
    // Add comment
    Comment comment1 = new Comment(1, 10000, "comment1 content", false);
    Comment comment2 = new Comment(2, 20000, "comment2 content", true);
    assertAll(
        () -> this.commentDao.addComment(comment1), () -> this.commentDao.addComment(comment2));
    List<Comment> addedUnverifiedCommentList = this.commentDao.listComment(20, false);
    addedUnverifiedCommentList.removeAll(originUnverifiedCommentList);
    assertEquals(2, addedUnverifiedCommentList.size());
    Comment temp = addedUnverifiedCommentList.get(1);
    temp.setVerified(true);
    assertTrue(this.commentDao.updateComment(temp));
    addedUnverifiedCommentList.remove(temp);
    List<Comment> addedVerifiedCommentList = this.commentDao.listComment(20, true);
    addedVerifiedCommentList.removeAll(originVerifiedCommentList);
    this.addedVerifiedCommentIdSet = new HashSet<>();
    this.addedUnverifiedCommentIdSet = new HashSet<>();
    for (Comment comment : addedUnverifiedCommentList) {
      this.addedUnverifiedCommentIdSet.add(comment.getId());
    }
    for (Comment comment : addedVerifiedCommentList) {
      this.addedVerifiedCommentIdSet.add(comment.getId());
    }
    assertAll(
        () -> assertEquals(1, this.addedUnverifiedCommentIdSet.size()),
        () -> assertEquals(1, this.addedVerifiedCommentIdSet.size()));

    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    this.user = new User("usernameusername1", "passwordpassword1", "name1", "MALE", "13000000000");
    this.userDao.addUser(this.user);
    this.user = this.userDao.queryAllUsers().get(0);
    Building building1 = new Building("buildingname1", "buildingdescription1", "400");
    Building building2 = new Building("buildingname2", "buildingdescription2", "4400");
    this.buildingDao.addBuilding(building1);
    this.buildingDao.addBuilding(building2);
    this.buildingMap = new HashMap<>();
    for (Building building : this.buildingDao.listBuilding(20)) {
      this.buildingMap.put(building.getName(), building);
    }
    userLogin();
  }

  @AfterEach
  public void tearDown() {
    driver.quit();
    for (User user : this.userDao.queryAllUsers()) {
      this.userDao.deleteUser(user.getId());
    }
    for (Record record : this.recordDao.listRecord(20, true)) {
      this.recordDao.deleteRecord(record.getId());
    }
    for (Record record : this.recordDao.listRecord(20, false)) {
      this.recordDao.deleteRecord(record.getId());
    }
    for (Building building : this.buildingDao.listBuilding(20)) {
      this.buildingDao.deleteBuilding(building.getId());
    }
    for (int newsId : this.addedNewsIdSet) {
      assertTrue(this.newsDao.deleteNewsById(newsId));
    }
    for (int commentId : this.addedUnverifiedCommentIdSet) {
      assertTrue(this.commentDao.deleteComment(commentId));
    }
    for (int commentId : this.addedVerifiedCommentIdSet) {
      assertTrue(this.commentDao.deleteComment(commentId));
    }
  }

  private void userLogin() {
    // Step # | name | target | value | comment
    // 1 | open | http://localhost:8080/MeetHere_war/ |  |
    driver.get("http://localhost:8080/MeetHere_war/");
    // 2 | setWindowSize | 1052x554 |  |
    driver.manage().window().setSize(new Dimension(1052, 554));
    // 3 | click | id=username |  |
    driver.findElement(By.id("username")).click();
    // 4 | type | id=username | root |
    driver.findElement(By.id("username")).sendKeys(username);
    // 5 | type | id=password | root |
    driver.findElement(By.id("password")).sendKeys(password);
    // 6 | click | css=.btn:nth-child(1) |  |
    driver.findElement(By.cssSelector(".btn:nth-child(1)")).click();
  }

  @ParameterizedTest
  @MethodSource("bookProvider")
  @Order(1)
  public void bookBuilding(String buildingName, String startDate, String duration)
      throws Throwable {
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    Building building = this.buildingMap.get(buildingName);

    // Test name: BookBuilding
    // Step # | name | target | value | comment
    // 1 | open | http://localhost:8080/MeetHere_war/building?action=list |  |
    driver.get("http://localhost:8080/MeetHere_war/building?action=list");
    // 2 | setWindowSize | 1052x554 |  |
    driver.manage().window().setSize(new Dimension(1052, 554));
    // 3 | click | id=buildingId |  |
    driver.findElement(By.id("buildingId")).click();
    // 4 | select | id=buildingId | label=building1 |
    {
      WebElement dropdown = driver.findElement(By.id("buildingId"));
      dropdown.findElement(By.xpath("//option[. = '" + buildingName + "']")).click();
    }
    // 5 | click | id=buildingId |  |
    driver.findElement(By.id("buildingId")).click();
    // 6 | click | id=startDate |  |
    driver.findElement(By.id("startDate")).click();
    // 7 | type | id=startDate | 2020-01-01 |
    driver.findElement(By.id("startDate")).sendKeys(startDate);
    // 8 | type | id=duration | 1 |
    driver.findElement(By.id("duration")).sendKeys(duration);
    // 9 | click | css=.btn |  |
    driver.findElement(By.cssSelector(".btn")).click();
    Record record = this.recordDao.listRecordWithUserId(20, this.user.getId(), false).get(0);
    assertAll(
        () -> assertEquals(building.getId(), record.getBuildingId()),
        () -> assertEquals(this.user.getId(), record.getUserId()),
        () -> assertEquals(sdf.parse(startDate).getTime(), record.getStartDate()),
        () ->
            assertEquals(
                sdf.parse(startDate).getTime() + Integer.parseInt(duration) * 24 * 3600 * 1000,
                record.getEndDate()));
  }

  @Test
  @Order(2)
  public void clickMenu() {

    // Test name: ClickMenu
    // Step # | name | target | value | comment
    // 1 | open | http://localhost:8080/MeetHere_war/blank |  |
    driver.get("http://localhost:8080/MeetHere_war/blank");
    // 2 | setWindowSize | 1052x554 |  |
    driver.manage().window().setSize(new Dimension(1920, 1080));
    // 3 | click | linkText=首页 |  |
    driver.findElement(By.linkText("首页")).click();
    assertEquals("欢迎您,朋友!", driver.findElement(By.id("welcome")).getText());
    // 4 | click | linkText=新闻 |  |
    driver.findElement(By.linkText("新闻")).click();
    assertEquals("新闻", driver.findElement(By.id("#id_title")).getText());
    // 5 | click | linkText=留言板 |  |
    driver.findElement(By.linkText("留言板")).click();
    assertEquals("留言板", driver.findElement(By.id("#id_title")).getText());
    // 6 | click | linkText=场地预约 |  |
    driver.findElement(By.linkText("场地预约")).click();
    assertEquals("我要预约", driver.findElement(By.id("#id_title")).getText());
    // 7 | click | linkText=预约记录 |  |
    driver.findElement(By.linkText("预约记录")).click();
    assertEquals("已审核记录", driver.findElement(By.id("#id_title")).getText());
    // 8 | click | linkText=修改密码 |  |
    driver.findElement(By.linkText("修改密码")).click();
    assertEquals("修改密码", driver.findElement(By.id("#id_title")).getText());
    // 9 | click | linkText=退出系统 |  |
    driver.findElement(By.linkText("退出系统")).click();
    assertEquals("注册", driver.findElement(By.id("#id_signup")).getText());
  }

  @Test
  public void showNewsDetail() {
    // Test name: ShowNewsDetail
    // Step # | name | target | value | comment
    // 1 | open | http://localhost:8080/MeetHere_war/news?action=list |  |
    driver.manage().window().setSize(new Dimension(1052, 554));
    for (int id : this.addedNewsIdSet) {
      driver.get("http://localhost:8080/MeetHere_war/news?action=list");
      driver.findElement(By.id("detail" + id)).click();
      News detailedNews = this.newsDao.queryNewsById(id);
      assertAll(
          () -> assertEquals(detailedNews.getTitle(), driver.findElement(By.id("title")).getText()),
          () ->
              assertEquals(detailedNews.getAuthor(), driver.findElement(By.id("author")).getText()),
          () ->
              assertEquals(
                  detailedNews.getDetail(), driver.findElement(By.id("detail")).getText()));
    }
    // 2 | setWindowSize | 1052x554 |  |

    // 3 | click | css=.btn |  |

  }

  @ParameterizedTest
  @MethodSource("commentProvider")
  public void addComment(String content, boolean success, String errorMessage) {
    // Test name: AddComment
    // Step # | name | target | value | comment
    // 1 | open | http://localhost:8080/MeetHere_war/comment?action=list |  |
    driver.get("http://localhost:8080/MeetHere_war/comment?action=list");
    // 2 | setWindowSize | 1052x554 |  |
    driver.manage().window().setSize(new Dimension(1440, 900));
    // 3 | click | css=.btn |  |
    driver.findElement(By.cssSelector(".btn")).click();
    // 4 | click | id=content |  |
    driver.findElement(By.id("content")).click();
    // 5 | type | id=content | 123 |
    driver.findElement(By.id("content")).sendKeys(content);
    // 6 | click | css=.btn:nth-child(1) |  |
    driver.findElement(By.cssSelector(".btn:nth-child(1)")).click();
    if (success) {
      List<Comment> currentCommentList = this.commentDao.listComment(20, false);
      Set<Integer> tempCommentIdSet = new HashSet<>();
      for (Comment comment : currentCommentList) {
        tempCommentIdSet.add(comment.getId());
      }
      tempCommentIdSet.removeAll(this.originUnverifiedCommentIdSet);
      tempCommentIdSet.removeAll(this.addedUnverifiedCommentIdSet);
      assertEquals(1, tempCommentIdSet.size());
      for (int id : tempCommentIdSet) {
        Comment addedComment = this.commentDao.queryCommentById(id);
        assertAll(
            () -> assertEquals(id, addedComment.getId()),
            () -> assertEquals(content, addedComment.getContent()),
            () -> assertEquals(this.user.getId(), addedComment.getUserId()),
            // Track added comment
            () -> assertTrue(this.addedUnverifiedCommentIdSet.add(id)));
      }
    } else {
      assertEquals(errorMessage, driver.findElement(By.id("error")).getText());
    }
  }
}
